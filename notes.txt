//ep 3

1. We have an initial array which containst 4 objects with keys as the message and the sender

2. Were mapping through this array and returning the chat ChatMessage component in it (the one which has the sender === 'user' && img ), and were passing the props sender and message [now we get this from the array of objects that we mapped]

3. store this entire mapping process in an array and then in our App component we use {variable}

4. OR now its  more easier, instead of storing it in a variable we directly put the whole map process in curly braces (replacing the variable) inside App component

5. To make our code cleaner we created a new component called ChatMessages and cut pasted the array we created and the mapping process here 
note- when were mapping we have to return it sepearately! Now just call the ChatMessages component into App

6. State - Data that is connected to the HTML.
When we update this data, it will update the HTML

In React we do not update the data directly, thats why eventho we pushed a new object into the ChatMessages array it didnt display in our html

We do not modify the data directly, we create a copy. and then modify the copy. (Use spread operator), basically were spreading values from one array to another array [...array, newObject]

7. event.target gives us the element that were typing in, in this case the chat input box

We use state to save data that changes over time, like what we type in the input box

8. We have a problem now we want to access chatMessages array and setChatMessages updater function in ChatInput but we dont have access to it. (Since the array is only in ChatMessages). So what we do here is bring the state of ChatMessages into App itself and then pass them as props to both ChatInput and ChatMessages so they both can freely access it 

9. The value prop in the input allows us to change the text inside <input /> [basically were doing this so we can make the textbox empty]

10. To get a response from the robot were using an external library

//ep 5

1. mostly css based lesson

2. were using useEffect to automatically scroll to the bottom when we send a message to the chatbot

3. useEffect runs some code after the component is created or updated

4. Were using useRef because whenever the chat-messages-container gets a new message we want to scroll to the bottom and were doing this inside a useEffect (cuz we only want this to happen when the component is updated)

5. first initialize useRef as null and store it in a variable, then give the element a ref property w the variable name

6. Now inside useRef if we clg (chatMessagesRef.cureent) [chatMessagesRef is the variable name] we can see the div container of the chat messages html element

//ep7 

- Generating HTML using React:

1. Save the data in our JavaScript (products.js from starting-code > data)
2. Use this data to generate the HTML

[
Why product.rating.stars * 10?
Your rating images are named like this in your /images/ratings/ folder:

rating-40.png → for 4.0 stars

rating-45.png → for 4.5 stars

rating-50.png → for 5.0 stars

But product.rating.stars is a float (e.g. 4.5, 4.0, 5.0), and filenames can’t have decimal points in them.
So multiplying by 10 turns:

4.5 → 45

4.0 → 40

5.0 → 50

This makes it match the image filename.
]

3. For products like socks, its showing 10.9 but we want to show 10.90, to fix this ->
(product.priceCents / 100).toFixed(2)

4. Data fetching -> Getting data from our backend

5. the url .api/cart-items gives us the cart data

6. Calculating the total quantity of the cart:
- First we fetch the whole cart from the backend (array of items in our cart; Each object in the array has its id, productId, quantity etc)

- We save this in the state of Cart

- Remember the header has the 3 at the top which is the total no of items in the cart, we need to pass that dynamically as props to the header

-  let totalQuantity = 0;
  cart.forEach((item) => {
    totalQuantity += item.quantity;
  });

  This code is giving us the total items we have in our cart; Just use totalQuantity then

7. Shortcut so we dont have to type localhost:3000 always 

-> Open vite.config.js
-> after the plugins key, server: {
    proxy: {
      '/api': {
        target: 'http://localhost:3000'
      }
    }
  }

8. We want the cart state to be shared between the home page and the cart page, so well be lifting the state up in App.jsx and then passing them as props

9. In our checkout page we also want the name of the products in the card; but the cart array does not have it. 
So here we went back to App.jsx and added a query parameter in the useEffect ?expand=product

A query param lets us add additional info to our request, so when the backend receives this param, its gonna expand the cart with product details

10. Back to our CheckoutPage.jsx we now got the detaails we need aka the name img price etc 
For the price, we need to reuse the same code we did in HomePage.jsx so in src we made a utils folder > money.js
inside here is a function to format money, we reuse it in HomePage and CheckoutPage

11. Now we created a state for deliveryOptios to fetch it from the backend
/api/delivery-options also supports a query param for expand=estimatedDeliveryTime
Each delivery option has the number of days it takes to deliver and the price

We mapped deliveryOptions state set an id and now we need to dynamically generate the date 
With our expand query param we got a estimatedDeliveryTimeMs:19282298... in our array of object. How do we display this as a date? we use dayjs!

we gave day js our estimatedDeliveryTime from the array we mapped (it is one of the keys) and formatted in a way which shows us the day of the week, Month and date (Monday, July 7)

Now we need to show either free shipping / {price} - shipping

In our map, we create a variable called priceString and gave it a default value of Free shipping 
Here isnide an if deliveryOption.priceCents is > 0 , then well have to overwrite the free shipping with this 
priceString = `${formatMoney(deliveryOption.priceCents)} - Shipping`

We are changing the name of the input radio here because we want each product to be able to choose a delivery option. If all radio inputs had the same name, then all the products will only have 1 delivery option.
(Each group is tied to the cartItems's productId so the user can choose 1 delivery option per product.)
hence name=delivery-option-cartItem.productId

For the checked= {deliveryOption.id=== cartItem.deliveryOptionId}"Check this radio button only if this option is the one the user selected for this product."

The delivery date at the top is determined by whatever option we chose

so inside cartItem map were creating a variable for the selected delivery option

❓ Why check deliveryOptions.length > 0?
Because when the component first loads:

deliveryOptions is an empty array ([])

The data hasn't been fetched from the server yet

You don’t want to call .find() or use deliveryOption.estimatedDeliveryTimeMs on undefined

Generating the HTML for the payment summary:
create a state for payment summary set it as null (for object)

its pretty easy just axios and setPaymentSummary ; and replace the information with formatMoney and give it the relavant objects property

since its null we use && 

10. Now were working on the orders page 

- First we need to share the cart with the orders page ; cuz the header needs the total items in the cart rememver we did the whole totalQuantity thing

- Creating a state for orders to get it from the backend



